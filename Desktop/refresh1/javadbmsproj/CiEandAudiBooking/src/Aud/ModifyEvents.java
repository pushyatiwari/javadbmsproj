package Aud;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Time;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author LENOVO
 */
public class ModifyEvents extends javax.swing.JFrame {
    int evntid;

    /**
     * Creates new form ModifyEvents
     */
    
     Connection myConn = null;
        Statement myStmt = null;
        ResultSet myRs = null;
        PreparedStatement preparedStatement;
    /**
     * Creates new form BookAuditorium
     */
   void getConnectiondb() throws SQLException, ClassNotFoundException{
        // TODO code application logic here
       
      String user = "root";
      String pass = "test";

      myConn = DriverManager.getConnection("jdbc:mysql://localhost:3306/aud_jdbms", user, pass);
       

       
    }
    
    
    public ModifyEvents() {
        initComponents();
        //[20,27,93]   
               getContentPane().setBackground(new java.awt.Color(1,1,1));


    }
    void refresh()
    {
        
         //updating every auditoruims to N
              try {
            getConnectiondb();
               String getaudid = ("SELECT * FROM Auditoriums");
             Statement stgetaudid = myConn.createStatement();

ResultSet rsgetaudid = stgetaudid.executeQuery(getaudid);
        while(rsgetaudid.next())
        {
           String aud_id = rsgetaudid.getString("Aud_ID");
            System.out.println("audid = "+aud_id);
             String updateaud = "update Auditoriums set status = \"N\" where Aud_ID = ?";
            PreparedStatement pst1 = myConn.prepareStatement(updateaud);
   pst1.setString(1, aud_id);
   


   pst1.execute();


        }
          
        } catch (SQLException ex) {
            Logger.getLogger(ModifyEvents.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ModifyEvents.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
         try {
             getConnectiondb();
               //select aud_id from ahase
             
             
             String sql = ("SELECT * FROM AHASE");
             Statement st = myConn.createStatement();

ResultSet rs = st.executeQuery(sql);
        while(rs.next())
        {
           String aud_id = rs.getString("Aud_ID");
             System.out.println("final audid = "+aud_id);
            String updateaud = "update Auditoriums set status = \"Y\" where Aud_ID = ?";
            PreparedStatement pst = myConn.prepareStatement(updateaud);
   pst.setString(1, aud_id);
    pst.execute();
           


        }
    


 
         } catch (SQLException ex) {
             Logger.getLogger(ModifyEvents.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(ModifyEvents.class.getName()).log(Level.SEVERE, null, ex);
         }
      
    }
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        eventname = new javax.swing.JLabel();
        date = new javax.swing.JLabel();
        starttime = new javax.swing.JLabel();
        endtime = new javax.swing.JLabel();
        starttimeval = new javax.swing.JTextField();
        endtimeval = new javax.swing.JTextField();
        save = new javax.swing.JButton();
        eventname2 = new javax.swing.JLabel();
        eventname2val = new javax.swing.JTextField();
        delete = new javax.swing.JButton();
        back = new javax.swing.JButton();
        eventname_val = new javax.swing.JComboBox<>();
        dateval = new com.toedter.calendar.JDateChooser();
        eventid = new javax.swing.JTextField();
        eventname1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        back1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        eventname.setFont(new java.awt.Font("DejaVu Sans Condensed", 3, 24)); // NOI18N
        eventname.setForeground(new java.awt.Color(254, 254, 254));
        eventname.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        eventname.setText("Event Name");

        date.setFont(new java.awt.Font("DejaVu Sans Condensed", 3, 24)); // NOI18N
        date.setForeground(new java.awt.Color(254, 254, 254));
        date.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        date.setText("Date");

        starttime.setFont(new java.awt.Font("DejaVu Sans Condensed", 3, 24)); // NOI18N
        starttime.setForeground(new java.awt.Color(254, 254, 254));
        starttime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        starttime.setText("Start Time ");

        endtime.setFont(new java.awt.Font("DejaVu Sans Condensed", 3, 24)); // NOI18N
        endtime.setForeground(new java.awt.Color(254, 254, 254));
        endtime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        endtime.setText("End Time");

        starttimeval.setBackground(new java.awt.Color(1, 1, 1));
        starttimeval.setFont(new java.awt.Font("DejaVu Sans Condensed", 3, 18)); // NOI18N
        starttimeval.setForeground(new java.awt.Color(254, 254, 254));

        endtimeval.setBackground(new java.awt.Color(1, 1, 1));
        endtimeval.setFont(new java.awt.Font("DejaVu Sans Condensed", 3, 18)); // NOI18N
        endtimeval.setForeground(new java.awt.Color(254, 254, 254));

        save.setBackground(new java.awt.Color(45, 99, 95));
        save.setFont(new java.awt.Font("DejaVu Sans Condensed", 3, 24)); // NOI18N
        save.setForeground(new java.awt.Color(254, 254, 254));
        save.setText("SAVE");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        eventname2.setFont(new java.awt.Font("DejaVu Sans Condensed", 3, 24)); // NOI18N
        eventname2.setForeground(new java.awt.Color(254, 254, 254));
        eventname2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        eventname2.setText("Event Name");

        eventname2val.setBackground(new java.awt.Color(1, 1, 1));
        eventname2val.setForeground(new java.awt.Color(254, 254, 254));
        eventname2val.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventname2valActionPerformed(evt);
            }
        });

        delete.setBackground(new java.awt.Color(45, 99, 95));
        delete.setFont(new java.awt.Font("DejaVu Sans Condensed", 3, 24)); // NOI18N
        delete.setForeground(new java.awt.Color(254, 254, 254));
        delete.setText("DELETE");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        back.setBackground(new java.awt.Color(45, 99, 95));
        back.setFont(new java.awt.Font("DejaVu Sans Condensed", 3, 24)); // NOI18N
        back.setForeground(new java.awt.Color(254, 254, 254));
        back.setText("BACK");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        eventname_val.setBackground(new java.awt.Color(1, 1, 1));
        eventname_val.setFont(new java.awt.Font("DejaVu Sans Condensed", 3, 18)); // NOI18N
        eventname_val.setForeground(new java.awt.Color(254, 254, 254));
        eventname_val.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventname_valActionPerformed(evt);
            }
        });

        dateval.setBackground(new java.awt.Color(1, 1, 1));
        dateval.setForeground(new java.awt.Color(254, 254, 254));

        eventid.setBackground(new java.awt.Color(1, 1, 1));
        eventid.setFont(new java.awt.Font("DejaVu Sans Condensed", 3, 18)); // NOI18N
        eventid.setForeground(new java.awt.Color(254, 254, 254));

        eventname1.setFont(new java.awt.Font("DejaVu Sans Condensed", 3, 24)); // NOI18N
        eventname1.setForeground(new java.awt.Color(254, 254, 254));
        eventname1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        eventname1.setText("Event ID");

        jLabel1.setFont(new java.awt.Font("DejaVu Sans Condensed", 3, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(254, 254, 254));
        jLabel1.setText("MODIFY EVENT");

        jLabel2.setFont(new java.awt.Font("DejaVu Sans Condensed", 3, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(254, 254, 254));
        jLabel2.setText("DELETE EVENT");

        back1.setBackground(new java.awt.Color(45, 99, 95));
        back1.setFont(new java.awt.Font("DejaVu Sans Condensed", 3, 24)); // NOI18N
        back1.setForeground(new java.awt.Color(254, 254, 254));
        back1.setText("REFRESH");
        back1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(174, 174, 174)
                .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(eventname2, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(95, 95, 95)
                                .addComponent(eventname2val, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(198, 198, 198)
                                .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                                .addComponent(back1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(70, 70, 70)
                                .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(starttime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                                .addComponent(endtime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                                .addComponent(eventname, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(eventname1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(starttimeval)
                            .addComponent(endtimeval)
                            .addComponent(dateval, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
                            .addComponent(eventname_val, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(eventid)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(66, 66, 66))
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eventname_val, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eventname, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eventid, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eventname1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dateval, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(starttimeval, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(starttime, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(endtimeval, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(endtime, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(eventname2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eventname2val, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(back1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
        String event_id;
        event_id = eventname2val.getText();
        
          try {
             getConnectiondb();
              String delahase = "Delete from AHASE where Event_ID = ?";
             PreparedStatement pstdelahase = myConn.prepareStatement(delahase);
   pstdelahase.setString(1, event_id);       
             pstdelahase.execute();
             
             
             String sql = "Delete from Events where Event_ID = ?";
            PreparedStatement pst = myConn.prepareStatement(sql);
   pst.setString(1, event_id);
   pst.execute();
   refresh();
   
         } catch (SQLException ex) {
             Logger.getLogger(ModifyAuditorium.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(ModifyAuditorium.class.getName()).log(Level.SEVERE, null, ex);
         }
        
        
        
    }//GEN-LAST:event_deleteActionPerformed

    private void eventname2valActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventname2valActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_eventname2valActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
       new BookAuditorium().setVisible(true);
           this.setVisible(false);  // TODO add your handling code here:
    }//GEN-LAST:event_backActionPerformed

    private void eventname_valActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventname_valActionPerformed
        // TODO add your handling code here:
        try {
             getConnectiondb();
             
                String sel = eventname_val.getSelectedItem().toString();
                System.out.println("Aud.ModifyEvents.eventname_valActionPerformed()"+sel);
             String sql = ("SELECT * FROM Events where Event_Name = '"+sel+"'");
             Statement st = myConn.createStatement();

ResultSet rs = st.executeQuery(sql);
        while(rs.next())
        {
Date str1 = rs.getDate("Date");
 Time stTime = rs.getTime("StartTime");
 Time etTime = rs.getTime("EndTime");
   evntid = rs.getInt("Event_ID");
 
    dateval.setDate(str1);
    starttimeval.setText(" "+stTime);
      endtimeval.setText(" "+etTime);
      eventid.setText(" "+evntid);
        }
    


 
         } catch (SQLException ex) {
             Logger.getLogger(ModifyEvents.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(ModifyEvents.class.getName()).log(Level.SEVERE, null, ex);
         }
      
        
          
        
    }//GEN-LAST:event_eventname_valActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // TODO add your handling code here:
         //int id;
        String eName,sTime = null,eTime = null;
        //id = Integer.parseInt(eventid.getText());
         String sel = eventname_val.getSelectedItem().toString();
        eName = sel;
        sTime = starttimeval.getText();
        eTime = endtimeval.getText();
        
     java.util.Date dateOfEvent = dateval.getDate();
java.sql.Date sqlDateofevnt = new java.sql.Date(dateOfEvent.getTime());     
       
      
        
    DateFormat sdf = new SimpleDateFormat("hh:mm");
      java.util.Date date1 = null;
       java.util.Date date2 = null;
     try {
         date1 = sdf.parse(sTime);
          date2 = sdf.parse(eTime);
     } catch (ParseException ex) {
         Logger.getLogger(BookAuditorium.class.getName()).log(Level.SEVERE, null, ex);
     }
      Time time1 = new Time(date1.getTime());
      Time time2 = new Time(date2.getTime());
        
//        String query = "UPDATE Events SET Event_Name='"+eName+"', Date = "+ sqlDateofevnt+ ", StartTime = "+
//                time1+"EndTime = "+time2+" WHERE Event_ID="+evntid; 
        
        
        
        
        try {
            getConnectiondb();
             String sql = "update Events set Event_Name=? ,Date=?,StartTime= ? ,EndTime= ? where Event_ID=?";
            PreparedStatement pst = myConn.prepareStatement(sql);
   pst.setString(1, eName);
    pst.setDate(2,sqlDateofevnt);
     pst.setTime(3, time1);
      pst.setTime(4,time2);
      pst.setInt(5, evntid);


   pst.execute();
        } catch (SQLException ex) {
            Logger.getLogger(ModifyEvents.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ModifyEvents.class.getName()).log(Level.SEVERE, null, ex);
        }
          System.out.print("done");     
    }//GEN-LAST:event_saveActionPerformed

    private void back1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back1ActionPerformed
        // TODO add your handling code here:
          ModifyEvents me = new ModifyEvents();
         me.setVisible(true);
           this.setVisible(false);
           
           try {
             getConnectiondb();
             String sql = ("SELECT * FROM Events ");
             Statement st = myConn.createStatement();
ResultSet rs = st.executeQuery(sql);
while(rs.next()) { 
 
  String ename = rs.getString("Event_Name"); 


 me.eventname_val.addItem(ename);
 
 
}

 } catch (SQLException ex) {
             Logger.getLogger(ModifyEvents.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(ModifyEvents.class.getName()).log(Level.SEVERE, null, ex);
         }
         
           
        
    }//GEN-LAST:event_back1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ModifyEvents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ModifyEvents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ModifyEvents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ModifyEvents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ModifyEvents m1 = new ModifyEvents();
                m1.setVisible(true);
               
                
         
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JButton back1;
    private javax.swing.JLabel date;
    private com.toedter.calendar.JDateChooser dateval;
    private javax.swing.JButton delete;
    private javax.swing.JLabel endtime;
    private javax.swing.JTextField endtimeval;
    private javax.swing.JTextField eventid;
    private javax.swing.JLabel eventname;
    private javax.swing.JLabel eventname1;
    private javax.swing.JLabel eventname2;
    private javax.swing.JTextField eventname2val;
    public javax.swing.JComboBox<String> eventname_val;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton save;
    private javax.swing.JLabel starttime;
    private javax.swing.JTextField starttimeval;
    // End of variables declaration//GEN-END:variables
}

package Aud;



import static com.sun.corba.se.spi.presentation.rmi.StubAdapter.request;
import com.toedter.calendar.JDateChooser;
import com.toedter.calendar.JDayChooser;
import java.awt.Color;
import java.awt.Container;
import java.awt.Panel;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Date;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Clock;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author LENOVO
 */
public class BookAuditorium extends javax.swing.JFrame {
     int id;
        String eName,sTime = null,eTime = null;
        int Maxseat;
    
 Connection myConn = null;
        Statement myStmt = null;
        ResultSet myRs = null;
        PreparedStatement preparedStatement;
      Time time1,time2;
    /**
     * Creates new form BookAuditorium
     */
   void getConnectiondb() throws SQLException, ClassNotFoundException{
        // TODO code application logic here
       
      String user = "root";
      String pass = "test";

      myConn = DriverManager.getConnection("jdbc:mysql://localhost:3306/aud_jdbms", user, pass);
       

       
    }
    public BookAuditorium() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        bookauditorium = new javax.swing.JLabel();
        eventname = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        starttime = new javax.swing.JLabel();
        endtime = new javax.swing.JLabel();
        eventnameval = new javax.swing.JTextField();
        starttimeval = new javax.swing.JTextField();
        endtimeval = new javax.swing.JTextField();
        book = new javax.swing.JButton();
        addevent = new javax.swing.JButton();
        show = new javax.swing.JButton();
        modifyevents = new javax.swing.JButton();
        modifyauditorium = new javax.swing.JButton();
        eventname1 = new javax.swing.JLabel();
        eventidval = new javax.swing.JTextField();
        eventname2 = new javax.swing.JLabel();
        maxseatsval = new javax.swing.JTextField();
        show1 = new javax.swing.JButton();
        dateval = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(253, 145, 145));

        jPanel1.setBackground(new java.awt.Color(20, 27, 93));

        bookauditorium.setFont(new java.awt.Font("DejaVu Serif", 3, 48)); // NOI18N
        bookauditorium.setForeground(new java.awt.Color(39, 229, 217));
        bookauditorium.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bookauditorium.setText("BOOK AUDITORIUM");

        eventname.setFont(new java.awt.Font("DejaVu Serif Condensed", 3, 24)); // NOI18N
        eventname.setForeground(new java.awt.Color(39, 229, 217));
        eventname.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        eventname.setText("Event Name");

        jLabel3.setFont(new java.awt.Font("DejaVu Serif Condensed", 3, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(39, 229, 217));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Date");

        starttime.setFont(new java.awt.Font("DejaVu Serif Condensed", 3, 24)); // NOI18N
        starttime.setForeground(new java.awt.Color(39, 229, 217));
        starttime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        starttime.setText("Start Time");

        endtime.setFont(new java.awt.Font("DejaVu Serif Condensed", 3, 24)); // NOI18N
        endtime.setForeground(new java.awt.Color(39, 229, 217));
        endtime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        endtime.setText("End Time");

        eventnameval.setFont(new java.awt.Font("Courier 10 Pitch", 1, 24)); // NOI18N
        eventnameval.setForeground(new java.awt.Color(1, 1, 1));

        starttimeval.setFont(new java.awt.Font("Courier 10 Pitch", 1, 24)); // NOI18N
        starttimeval.setForeground(new java.awt.Color(1, 1, 1));
        starttimeval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                starttimevalActionPerformed(evt);
            }
        });

        endtimeval.setFont(new java.awt.Font("Courier 10 Pitch", 1, 24)); // NOI18N
        endtimeval.setForeground(new java.awt.Color(1, 1, 1));

        book.setBackground(new java.awt.Color(20, 16, 89));
        book.setFont(new java.awt.Font("DejaVu Serif Condensed", 3, 24)); // NOI18N
        book.setForeground(new java.awt.Color(39, 229, 217));
        book.setText("BOOK");
        book.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookActionPerformed(evt);
            }
        });

        addevent.setBackground(new java.awt.Color(20, 16, 89));
        addevent.setFont(new java.awt.Font("DejaVu Serif Condensed", 3, 24)); // NOI18N
        addevent.setForeground(new java.awt.Color(39, 229, 217));
        addevent.setText("ADD EVENT");
        addevent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addeventActionPerformed(evt);
            }
        });

        show.setBackground(new java.awt.Color(20, 16, 89));
        show.setFont(new java.awt.Font("DejaVu Serif Condensed", 3, 24)); // NOI18N
        show.setForeground(new java.awt.Color(39, 229, 217));
        show.setText("SHOW EVENTS");
        show.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showActionPerformed(evt);
            }
        });

        modifyevents.setBackground(new java.awt.Color(20, 16, 89));
        modifyevents.setFont(new java.awt.Font("DejaVu Serif Condensed", 3, 24)); // NOI18N
        modifyevents.setForeground(new java.awt.Color(39, 229, 217));
        modifyevents.setText("MODIFY EVENTS");
        modifyevents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyeventsActionPerformed(evt);
            }
        });

        modifyauditorium.setBackground(new java.awt.Color(20, 16, 89));
        modifyauditorium.setFont(new java.awt.Font("DejaVu Serif Condensed", 3, 24)); // NOI18N
        modifyauditorium.setForeground(new java.awt.Color(39, 229, 217));
        modifyauditorium.setText("MODIFY AUDITORIUMS");
        modifyauditorium.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyauditoriumActionPerformed(evt);
            }
        });

        eventname1.setFont(new java.awt.Font("DejaVu Serif Condensed", 3, 24)); // NOI18N
        eventname1.setForeground(new java.awt.Color(39, 229, 217));
        eventname1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        eventname1.setText("Event_ID");

        eventidval.setFont(new java.awt.Font("Courier 10 Pitch", 1, 24)); // NOI18N
        eventidval.setForeground(new java.awt.Color(1, 1, 1));
        eventidval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventidvalActionPerformed(evt);
            }
        });

        eventname2.setFont(new java.awt.Font("DejaVu Serif Condensed", 3, 24)); // NOI18N
        eventname2.setForeground(new java.awt.Color(39, 229, 217));
        eventname2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        eventname2.setText("Max Seats Required");

        maxseatsval.setFont(new java.awt.Font("Courier 10 Pitch", 1, 24)); // NOI18N
        maxseatsval.setForeground(new java.awt.Color(1, 1, 1));

        show1.setBackground(new java.awt.Color(20, 16, 89));
        show1.setFont(new java.awt.Font("DejaVu Serif Condensed", 3, 24)); // NOI18N
        show1.setForeground(new java.awt.Color(39, 229, 217));
        show1.setText("SHOW AUDITORIUMS");
        show1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                show1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(addevent)
                .addGap(56, 56, 56)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bookauditorium, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(book, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(modifyauditorium))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(show1, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(modifyevents))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(76, 76, 76)
                                .addComponent(show)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(97, 97, 97))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(273, 273, 273)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(eventname2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(eventname, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(eventname1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(starttime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(endtime, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(87, 87, 87)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(eventidval, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(eventnameval, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(maxseatsval, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(starttimeval, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(endtimeval, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(dateval, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bookauditorium)
                .addGap(48, 48, 48)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eventname1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eventidval, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eventname, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eventnameval, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eventname2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxseatsval, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(starttime, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(starttimeval, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(endtime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(endtimeval))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(book, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(show))
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addevent, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modifyauditorium, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modifyevents, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(show1))
                .addGap(37, 37, 37))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 74, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void starttimevalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_starttimevalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_starttimevalActionPerformed

    private void modifyauditoriumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyauditoriumActionPerformed
        // TODO add your handling code here:
        ModifyAuditorium ma = new ModifyAuditorium();
         ma.setVisible(true);
         this.setVisible(false);
         
           
           try {
             getConnectiondb();
             String sql = ("SELECT * FROM Auditoriums ");
             Statement st = myConn.createStatement();
ResultSet rs = st.executeQuery(sql);
while(rs.next()) { 
 
  String a_name = rs.getString("Aud_ID"); 

ma.audno_val.addItem(a_name);

 
 
}

 } catch (SQLException ex) {
             Logger.getLogger(ModifyEvents.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(ModifyEvents.class.getName()).log(Level.SEVERE, null, ex);
         }
         
          
         
         
         
         
    }//GEN-LAST:event_modifyauditoriumActionPerformed
 
    public void insertintoEvent()
    {
         id = Integer.parseInt(eventidval.getText());
        eName = eventnameval.getText();
        Maxseat = Integer.parseInt(maxseatsval.getText());
        sTime = starttimeval.getText();
        eTime = endtimeval.getText();
        
     Date dateOfEvent = dateval.getDate();
java.sql.Date sqlDateofevnt = new java.sql.Date(dateOfEvent.getTime());     
       
      
        
    DateFormat sdf = new SimpleDateFormat("hh:mm");
      Date date1 = null;
       Date date2 = null;
     try {
         date1 = sdf.parse(sTime);
          date2 = sdf.parse(eTime);
     } catch (ParseException ex) {
         Logger.getLogger(BookAuditorium.class.getName()).log(Level.SEVERE, null, ex);
     }
       time1 = new Time(date1.getTime());
       time2 = new Time(date2.getTime());
        
        String query = "insert into Events (Event_ID, Event_Name, MxStRqFrEvnt,Date,StartTime,EndTime) " + 
                                   "values (?,?,?,?,?,?)"; 
     try {
        getConnectiondb();

         preparedStatement = myConn.prepareStatement(query);

         preparedStatement.setInt(1,id);
         preparedStatement.setString(2,eName);
          preparedStatement.setInt(3,Maxseat);
         preparedStatement.setDate(4,sqlDateofevnt );
          preparedStatement.setTime(5,time1);
           preparedStatement.setTime(6,time2);
         

         // Execute statement and return the number of rows affected
         int rowCount = preparedStatement.executeUpdate();
         System.out.println("Number of rows affected: " + rowCount);
      } catch (SQLException ex) {
         Logger.getLogger(BookAuditorium.class.getName()).log(Level.SEVERE, null, ex);
     } catch (ClassNotFoundException ex) {
         Logger.getLogger(BookAuditorium.class.getName()).log(Level.SEVERE, null, ex);
     } finally {
            try {
                myConn.close();
            } catch (SQLException ex) {
                Logger.getLogger(BookAuditorium.class.getName()).log(Level.SEVERE, null, ex);
            }
      }

    }
    
    public void insertintoAhasE(String aud_id, String eventid)
    {
            try {
                          try {
             getConnectiondb();
         } catch (SQLException ex) {
             Logger.getLogger(BookAuditorium.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(BookAuditorium.class.getName()).log(Level.SEVERE, null, ex);
         }
                              
                                 PreparedStatement prpred2;
                                   prpred2 = myConn.prepareStatement("update Auditoriums set status= \"Y\" where Aud_ID = \""+aud_id+"\"");
                                   prpred2.executeUpdate();
                                   insertintoEvent();
                                 try {
                                     getConnectiondb();
                                 } catch (ClassNotFoundException ex) {
                                     Logger.getLogger(BookAuditorium.class.getName()).log(Level.SEVERE, null, ex);
                                 }
                                   String query = "insert into AHASE (Aud_ID,Event_ID) " +
                                     "values (?,?)";
                                    preparedStatement = myConn.prepareStatement(query);
                                      preparedStatement.setString(1,aud_id);
                                 preparedStatement.setString(2,eventid);
                                  // updates the new status of auditoriums;
                                 int rowCount = preparedStatement.executeUpdate();
                                   
                                   
                                   
                                    
                             }catch (SQLException ex) {
                                 Logger.getLogger(BookAuditorium.class.getName()).log(Level.SEVERE, null, ex);
                             } finally {
                                 try {
                                     preparedStatement.close();
                                 } catch (SQLException ex) {
                                     Logger.getLogger(BookAuditorium.class.getName()).log(Level.SEVERE, null, ex);
                                 }
                                 try {
                                     myConn.close();
                                 } catch (SQLException ex) {
                                     Logger.getLogger(BookAuditorium.class.getName()).log(Level.SEVERE, null, ex);
                                 }
                             }   
    }
    
    private void addeventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addeventActionPerformed
        // TODO add your handling code here:
       
           sTime = starttimeval.getText();
       // eTime = endtimeval.getText();
         Date date1 = null;
         Date date2 = null;
          SimpleDateFormat formatter = null;
           Time time1 = null;
        try{
         try {
            //for stime and etime formatting
    SimpleDateFormat sdf = new SimpleDateFormat("hh:mm");
     date1 = null;
         date1 = sdf.parse(sTime);   
         time1 = new Time(date1.getTime());
    System.out.println(formatter.format(date1));  
        // date2 = sdf.parse(eTime);
     } catch (ParseException ex) {
        Logger.getLogger(BookAuditorium.class.getName()).log(Level.SEVERE, null, ex);
    }
        }
        catch(Exception e)
        {
            
        }
   System.out.println("time is : " +(sTime));
       System.out.println("Aud.BookAuditorium.addeventActionPerformed()"+time1);
            
        
    }//GEN-LAST:event_addeventActionPerformed

    private void bookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookActionPerformed
        // TODO add your handling code here:
         ResultSet Audit = null ;
         ResultSet ahase;
         String eventid;
         int flag = 0;
         Time time12 = null;
         eventid = eventidval.getText();
        eName = eventnameval.getText();
        Maxseat = Integer.parseInt(maxseatsval.getText());
       sTime = starttimeval.getText();
       // eTime = endtimeval.getText();
         Date date1 = null;
         Date date2 = null;
         try {
                Date dateOfEvent = dateval.getDate();
java.sql.Date sqlDateofevnt = new java.sql.Date(dateOfEvent.getTime());
         try {
            //for stime and etime formatting
    DateFormat sdf = new SimpleDateFormat("hh:mm");
     date1 = null;
       date2 = null;
         date1 = sdf.parse(sTime);
        // date2 = sdf.parse(eTime);
     } catch (ParseException ex) {
        Logger.getLogger(BookAuditorium.class.getName()).log(Level.SEVERE, null, ex);
    }
         
     time12 = new Time(date1.getTime());
     //Time time2 = new Time(date2.getTime());

getConnectiondb();
         } catch (SQLException ex) {
             Logger.getLogger(BookAuditorium.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(BookAuditorium.class.getName()).log(Level.SEVERE, null, ex);
         }

        PreparedStatement query1 = null;
     PreparedStatement  query2 = null; 
         try {
             query1 = myConn.prepareStatement("Select * from Auditoriums");
           query2 = myConn.prepareStatement("Select * from AHASE");
         } catch (SQLException ex) {
             Logger.getLogger(BookAuditorium.class.getName()).log(Level.SEVERE, null, ex);
         }
     
         try {
             Audit = query1.executeQuery();
               ahase = query2.executeQuery();
         } catch (SQLException ex) {
             Logger.getLogger(BookAuditorium.class.getName()).log(Level.SEVERE, null, ex);
         }
        

   
     
         
             try {
                 while(Audit.next())
                 {
//                System.out.print(Audit.getString("Aud_ID"));
//                 System.out.print(" , ");
//                System.out.print(Audit.getString("NoofSeats"));
//                  System.out.print(" , ");
//                System.out.print(Audit.getString("Status"));
//                  System.out.print(" , ");
//                 System.out.print(Audit.getString("Count"));
                     
                     String aud_id = Audit.getString("Aud_ID");
                     int noofseats =  Audit.getInt("NoofSeats");
                     String status = Audit.getString("Status");
                     int count =  Audit.getInt("Count");
                     if(Maxseat<=noofseats)
                     {
           //if status is n and maxseats required by events is lesser or equal than auditorium then it books the auditorium;
                        if(status.equals("N"))
                         {
                            //insert into ahase automatically inserts in event;
                          System.out.println(Audit.getString("NoofSeats"));
                             insertintoAhasE(aud_id, eventid);
                             flag = 1;
                             break;
                         }
                    else if(status.equals("Y"))
                         {
                 //selecting evnt id from ahase to check which event has booked auditorium 
//                             PreparedStatement ahasequery1 = myConn.prepareStatement("Select AHASE.Event_ID from AHASE,Events"
//                                     + "where Aud_ID = "+"\""+aud_id+"\")");
//                             ResultSet r2 = ahasequery1.executeQuery();
                          PreparedStatement ahasequery = myConn.prepareStatement("Select max(EndTime) as EndTime from Events,AHASE\n" +
                                  "where Events.Event_ID in (Select AHASE.Event_ID from AHASE,Events \n" +
                                            "where Aud_ID =\""+aud_id+"\" )");
                          
                          ResultSet Event_EndTime = ahasequery.executeQuery();
                          while(Event_EndTime.next())
                          {
                              System.out.println("eventend time is : "+Event_EndTime.getTime("EndTime"));
                              System.out.println("time 2 is :"+time12);
                              if(Event_EndTime!=null){
                              if(Event_EndTime.getTime("EndTime").before(time12))
                              {
                                  insertintoAhasE(aud_id, eventid);
                                  flag=1;                                   
                              }else {
                                  flag = 0;
                              }
                              }
                             
                         }
                         }
                         
                         
                         
                         
                    }
                     
                 }
                 if(flag==0)
                 {
                     System.out.println("Auditoriums not available");
                 }
             
             } catch (SQLException ex) {
                 Logger.getLogger(BookAuditorium.class.getName()).log(Level.SEVERE, null, ex);
             }

       
     
         

      
      
      
        
        
        
        
        
    }//GEN-LAST:event_bookActionPerformed

    private void showActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showActionPerformed
        // TODO add your handling code here:
        
      
        
    }//GEN-LAST:event_showActionPerformed

    private void modifyeventsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyeventsActionPerformed
        // TODO add your handling code here:
        ModifyEvents me = new ModifyEvents();
         me.setVisible(true);
           this.setVisible(false);
           
           try {
             getConnectiondb();
             String sql = ("SELECT * FROM Events ");
             Statement st = myConn.createStatement();
ResultSet rs = st.executeQuery(sql);
while(rs.next()) { 
 
  String ename = rs.getString("Event_Name"); 


 me.eventname_val.addItem(ename);
 
 
}

 } catch (SQLException ex) {
             Logger.getLogger(ModifyEvents.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(ModifyEvents.class.getName()).log(Level.SEVERE, null, ex);
         }
         
           
           
           
    }//GEN-LAST:event_modifyeventsActionPerformed

    private void show1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_show1ActionPerformed
        // TODO add your handling code here:
                new showauditoriums().setVisible(true);
           this.setVisible(false);
        
    }//GEN-LAST:event_show1ActionPerformed

    private void eventidvalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventidvalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_eventidvalActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookAuditorium.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookAuditorium.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookAuditorium.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookAuditorium.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BookAuditorium().setVisible(true);
             

                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addevent;
    private javax.swing.JButton book;
    private javax.swing.JLabel bookauditorium;
    private com.toedter.calendar.JDateChooser dateval;
    private javax.swing.JLabel endtime;
    private javax.swing.JTextField endtimeval;
    private javax.swing.JTextField eventidval;
    private javax.swing.JLabel eventname;
    private javax.swing.JLabel eventname1;
    private javax.swing.JLabel eventname2;
    private javax.swing.JTextField eventnameval;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField maxseatsval;
    private javax.swing.JButton modifyauditorium;
    private javax.swing.JButton modifyevents;
    private javax.swing.JButton show;
    private javax.swing.JButton show1;
    private javax.swing.JLabel starttime;
    private javax.swing.JTextField starttimeval;
    // End of variables declaration//GEN-END:variables
}
